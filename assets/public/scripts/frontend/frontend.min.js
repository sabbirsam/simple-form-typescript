/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!****************************************!*\
  !*** ./assets/src/scripts/frontend.js ***!
  \****************************************/
/**
 * 
 * @param {*} formData 
 * @returns 
 */

function generateRenderedForm(formData) {
  var html = '';
  formData.forEach(function (field) {
    switch (field.type) {
      case 'text':
      case 'number':
      case 'email':
      case 'hidden':
        html += "\n          <div class=\"text-fields\">\n            <label for=\"".concat(field.id, "\">").concat(field.label, "</label>\n            <input id=\"").concat(field.id, "\" type=\"").concat(field.type, "\" name=\"").concat(field.name, "\" placeholder=\"").concat(field.placeholder, "\" class=\"").concat(field.className, "\" value=\"").concat(field.value || '', "\">\n          </div>\n          <br>\n        ");
        break;
      case 'select':
        html += "\n          <div class=\"text-fields\">\n            <label for=\"".concat(field.id, "\">").concat(field.label, "</label>\n            <select id=\"").concat(field.id, "\" name=\"").concat(field.name, "\">");
        field.options.forEach(function (option) {
          html += "\n            <option value=\"".concat(option.value, "\" ").concat(field.value === option.value ? 'selected' : '', ">").concat(option.label, "</option>\n          ");
        });
        html += "\n            </select>\n          </div>\n          <br>\n        ";
        break;
      case 'file':
        html += "\n          <div class=\"text-fields\">\n            <label for=\"".concat(field.id, "\">").concat(field.label, "</label>\n            <input id=\"").concat(field.id, "\" type=\"").concat(field.type, "\" name=\"").concat(field.name, "\" class=\"").concat(field.className, "\">\n          </div>\n          <br>\n        ");
        break;
      case 'checkbox':
        //${field.value.includes(option.value) ? 'checked' : ''}
        html += "\n          <div class=\"text-fields\">\n            <label>".concat(field.label, "</label>");
        field.options.forEach(function (option) {
          //name="`${field.name}[]`"
          html += "\n            <div class=\"text-fields-insider\">\n              <input type=\"checkbox\" id=\"".concat(option.value, "\" name=\"").concat(field.name, "\" value=\"").concat(option.value, "\">\n              <label for=\"").concat(option.value, "\">").concat(option.label, "</label>\n            </div>");
        });
        html += "\n          </div>";
        break;
      case 'radio':
        html += "\n          <div class=\"text-fields\">\n            <label>".concat(field.label, "</label>");
        field.options.forEach(function (option) {
          html += "\n            <div class=\"text-fields-insider\">\n              <input\n                type=\"radio\"\n                id=\"".concat(option.value, "\"\n                name=\"").concat(field.name, "\"\n                value=\"").concat(option.value, "\"\n                ").concat(field.value === option.value ? 'checked' : '', "\n              />\n              <label for=\"").concat(option.value, "\">").concat(option.label, "</label>\n            </div>");
        });
        html += "\n          </div>";
        break;
      default:
        break;
    }
  });
  return html;
}

/**
 * Load Form 
 */
document.addEventListener('DOMContentLoaded', function () {
  var formContainers = document.querySelectorAll('.simple_form_container');
  formContainers.forEach(function (container) {
    var formId = container.getAttribute('data-form-id');
    var nonce = container.getAttribute('data-nonce');
    // Get the unique markup identifier associated with this shortcode
    var markupId = container.querySelector('.simple_form_loader').id;
    fetch(front_end_data.admin_ajax + '?action=simpleform_table_html&nonce=' + nonce + '&id=' + formId).then(function (response) {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    }).then(function (data) {
      var code = document.getElementById(markupId);
      var formData = data.data.table_settings;
      var renderedFormHTML = generateRenderedForm(formData);
      code.innerHTML = renderedFormHTML;
    })["catch"](function (error) {
      // Handle the error for this form
      console.error('Form', formId, 'Error:', error);
    });
  });
});

/**
 * Submit Form
 */

window.addEventListener('load', function () {
  var formContainers = document.querySelectorAll('.simple_form_container');
  formContainers.forEach(function (formContainer) {
    var formId = formContainer.dataset.formId;
    var nonce = formContainer.dataset.nonce;

    // Find the submit button within the current form container
    var submitButton = formContainer.querySelector('.submit-button');
    submitButton.addEventListener('click', function (event) {
      // Prevent the default form submission behavior
      event.preventDefault();

      // Serialize the form data
      var formData = new FormData(formContainer.querySelector('.simple_form'));

      // Check if form data is empty
      if (formData.entries().next().done) {
        alert("Form data is empty. Please fill out the form.");
        return; // Don't proceed with the AJAX request
      }

      // Create an AJAX request for the form submission
      var xhr = new XMLHttpRequest();
      xhr.open('POST', front_end_data.admin_ajax, true);
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      var formDataArray = Array.from(formData.entries()); // Used to send in Ajax
      var formDataObject = Object.fromEntries(formDataArray);
      var data = "action=simpleform_get_submit_data" + "&nonce=" + encodeURIComponent(nonce) + "&id=" + encodeURIComponent(formId) + "&form_data=" + JSON.stringify(formDataObject);
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          if (xhr.status === 200) {
            var responseData = JSON.parse(xhr.responseText);
            console.log('Response:', responseData);
            if (responseData.success) {
              // Clear the form fields
              var form = formContainer.querySelector('.simple_form');
              form.reset();

              // Show a success message using SweetAlert
              Swal.fire({
                icon: 'success',
                title: 'Success',
                text: responseData.message
              });
            }
          } else {
            // Handle the error for this form
            console.error('Form', formId, 'Error:', xhr.statusText);
          }
        }
      };
      xhr.send(data);
    });
  });
});
/******/ })()
;
//# sourceMappingURL=frontend.min.js.map