/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!****************************************!*\
  !*** ./assets/src/scripts/frontend.js ***!
  \****************************************/
/**
 * 
 * @param {*} formData 
 * @returns 
 */

function generateRenderedForm(formData) {
  var html = '';
  formData.forEach(function (field) {
    var fieldAttributes = '';
    if (field.required === 'true') {
      fieldAttributes += ' required';
    }
    switch (field.type) {
      case 'text':
      case 'number':
      case 'email':
        html += "\n          <div class=\"text-fields\">\n            <label for=\"".concat(field.id, "\">").concat(field.label, "</label>\n            <input id=\"").concat(field.id, "\" type=\"").concat(field.type, "\" name=\"").concat(field.name, "\" placeholder=\"").concat(field.placeholder, "\" class=\"").concat(field.className, "\" value=\"").concat(field.value || '', "\"").concat(fieldAttributes, ">\n          </div>\n          <br>\n        ");
        break;
      case 'hidden':
        html += "\n            <input id=\"".concat(field.id, "\" type=\"").concat(field.type, "\" name=\"").concat(field.name, "\" placeholder=\"").concat(field.placeholder, "\" class=\"").concat(field.className, "\" value=\"").concat(field.value || '', "\"").concat(fieldAttributes, ">\n        ");
        break;
      case 'select':
        html += "\n          <div class=\"text-fields\">\n            <label for=\"".concat(field.id, "\">").concat(field.label, "</label>\n            <select id=\"").concat(field.id, "\" name=\"").concat(field.name, "\"").concat(fieldAttributes, ">");
        field.options.forEach(function (option) {
          html += "\n            <option value=\"".concat(option.value, "\" ").concat(field.value === option.value ? 'selected' : '', ">").concat(option.label, "</option>\n          ");
        });
        html += "\n            </select>\n          </div>\n          <br>\n        ";
        break;
      case 'file':
        html += "\n          <div class=\"text-fields\">\n            <label for=\"".concat(field.id, "\">").concat(field.label, "</label>\n            <input id=\"").concat(field.id, "\" type=\"").concat(field.type, "\" name=\"").concat(field.name, "\" class=\"").concat(field.className, "\"").concat(fieldAttributes, ">\n          </div>\n          <br>\n        ");
        break;
      case 'checkbox':
        if (field.toggle === 'true') {
          // Render the toggle checkbox
          html += "\n            <div class=\"simple-form-checkbox-toggle\">\n              <label class=\"switch-label\">".concat(field.label, "\n                <input type=\"checkbox\" id=\"").concat(field.id, "\" name=\"").concat(field.name, "\" class=\"switch-input ").concat(field.className, "\"").concat(fieldAttributes, ">\n                <span class=\"slider round\"></span>\n              </label>\n            </div>");
        } else {
          // Render the default checkboxes
          html += "\n          <div class=\"text-fields\">\n            <label>".concat(field.label, "</label>");
          field.options.forEach(function (option) {
            html += "\n              <div class=\"text-fields-insider\">\n                <input type=\"checkbox\" id=\"".concat(option.value, "\" name=\"").concat(field.name, "\" value=\"").concat(option.value, "\"").concat(fieldAttributes, ">\n                <label for=\"").concat(option.value, "\">").concat(option.label, "</label>\n              </div>");
          });
          html += "\n            </div>";
        }
        break;
      case 'radio':
        html += "\n          <div class=\"text-fields\">\n            <label>".concat(field.label, "</label>");
        field.options.forEach(function (option) {
          html += "\n            <div class=\"text-fields-insider\">\n              <input\n                type=\"radio\"\n                id=\"".concat(option.value, "\"\n                name=\"").concat(field.name, "\"\n                value=\"").concat(option.value, "\"\n                ").concat(field.value === option.value ? 'checked' : '', "\n                ").concat(fieldAttributes, "\n              />\n              <label for=\"").concat(option.value, "\">").concat(option.label, "</label>\n            </div>");
        });
        html += "\n          </div>";
        break;
      default:
        break;
    }
  });
  return html;
}

/**
 * Load Form 
 */
document.addEventListener('DOMContentLoaded', function () {
  var formContainers = document.querySelectorAll('.simple_form_container');
  formContainers.forEach(function (container) {
    var formId = container.getAttribute('data-form-id');
    var nonce = container.getAttribute('data-nonce');
    // Get the unique markup identifier associated with this shortcode
    var markupId = container.querySelector('.simple_form_loader').id;
    fetch(front_end_data.admin_ajax + '?action=simpleform_table_html&nonce=' + nonce + '&id=' + formId).then(function (response) {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    }).then(function (data) {
      var code = document.getElementById(markupId);
      var formData = data.data.table_settings;
      var renderedFormHTML = generateRenderedForm(formData);
      code.innerHTML = renderedFormHTML;
    })["catch"](function (error) {
      // Handle the error for this form
      console.error('Form', formId, 'Error:', error);
    });
  });
});

/**
 * Submit Form
 */

window.addEventListener('load', function () {
  var formContainers = document.querySelectorAll('.simple_form_container');
  formContainers.forEach(function (formContainer) {
    var formId = formContainer.dataset.formId;
    var nonce = formContainer.dataset.nonce;

    // Find the submit button within the current form container
    var submitButton = formContainer.querySelector('.submit-button');
    submitButton.addEventListener('click', function (event) {
      // Prevent the default form submission behavior
      event.preventDefault();

      // Get all form elements within the form
      var formElements = formContainer.querySelectorAll('input, select, textarea');

      // Create an object to store the form data
      var formDataObject = {};

      // Create a flag to track if there are any required fields that are empty
      var hasEmptyRequiredFields = false;
      formElements.forEach(function (element) {
        // Check if the element has the "simple-form-checkbox-toggle" class
        var isToggleCheckbox = element.closest('.simple-form-checkbox-toggle') !== null;

        // Handle checkboxes with the "simple-form-checkbox-toggle" class
        if (isToggleCheckbox && element.type === 'checkbox') {
          formDataObject[element.name] = element.checked ? 'on' : 'off';
        } else {
          formDataObject[element.name] = element.value;
        }

        // Check if the field is required and empty
        if (element.hasAttribute('required') && formDataObject[element.name].trim() === '') {
          // Add a red border to indicate the required field is empty
          element.style.border = '1px solid red';
          hasEmptyRequiredFields = true;
        } else {
          // Remove any red border if the field is not empty
          element.style.border = '';
        }
      });

      // If there are empty required fields, prevent form submission
      if (hasEmptyRequiredFields) {
        alert('Please fill out all required fields.');
        return;
      }

      // Add the nonce and formId to the formDataObject
      // formDataObject['nonce'] = nonce;
      formDataObject['id'] = formId;

      // Create an AJAX request for the form submission
      var xhr = new XMLHttpRequest();
      xhr.open('POST', front_end_data.admin_ajax, true);
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      var data = "action=simpleform_get_submit_data" + "&nonce=" + encodeURIComponent(nonce) + "&id=" + encodeURIComponent(formId) + "&form_data=" + JSON.stringify(formDataObject);
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          if (xhr.status === 200) {
            var responseData = JSON.parse(xhr.responseText);
            console.log('Response:', responseData);
            if (responseData.success) {
              // Clear the form fields
              var form = formContainer.querySelector('.simple_form');
              form.reset();

              // Show a success message using SweetAlert
              Swal.fire({
                icon: 'success',
                title: 'Success',
                text: responseData.message
              });
            }
          } else {
            // Handle the error for this form
            console.error('Form', formId, 'Error:', xhr.statusText);
          }
        }
      };
      xhr.send(data);
    });
  });
});

// Floating form 
window.addEventListener('load', function () {
  // Get a reference to the WhatsApp icon and the form content
  var whatsappIcon = document.querySelector('.whatsapp-icon');
  var formContent = document.querySelector('.form-content');

  // Toggle the "active" class on the floating-whatsapp container when the icon is clicked
  whatsappIcon.addEventListener('click', function () {
    formContent.classList.toggle('active');
  });
});
/******/ })()
;
//# sourceMappingURL=frontend.min.js.map